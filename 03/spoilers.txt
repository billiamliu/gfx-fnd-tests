
Partial worked example:

{
  walls: [
    { x0: 3, y0: 0, x1: 2, y1: 1, color: {255, 0, 0}
  ],
  ground_color: [60, 60, 60],
  sky_color: [135, 206, 235],
  camera: {
    x: 0,
    y: 0,
    theta: 0,
    h_fov: 1.5708,
    width: 8,
    height: 6
  }
}

Hopefully by now we know what color the sky and ground are.  The camera is at (0,0), pointing due
east, and has a horizontal FOV of pi/2 radians, or 90 degrees.  That means that it can see
everything from NE through SE.  Because the aspect ratio of the output image is 4:3 (old-school!),
the v-fov must be 3pi/8, or 3/16 of a circle, or 67.5 degrees.  So far, so good.  So which pixels
correspond to this bright red wall?

The red wall exists only on the left side of the output image, a calculation "left as an exercise
for the interested reader".

Our horizontal FOV of pi/2, and our 8-column vertical resolution, means that a column's angle is
pi/16, and a half-column is pi/32.  The leftmost edge of our screen is at pi/4, but the pixels of
the leftmost column of our screen have their centres at a theta of pi/4 - pi/32.  So here are the
thetas of the first 4 columns:

    pi/4 -  pi/32   =   ~0.687
    pi/4 - 3pi/32   =   ~0.491
    pi/4 - 5pi/32   =   ~0.294
    pi/4 - 7pi/32   =   ~0.098   =   pi/32

Let's do the same logic again vertically.  We know that the angle between two adjacent pixels is
pi/32 (remember that our pixels are square).  Maybe we should denote our vertical angles by phi
instead of theta, to very slightly cut down on confusion.  Here are the phi values of our upper 3
rows:
    3pi/16 -  pi/32  =  ~0.491
    3pi/16 - 3pi/32  =  ~0.294
    3pi/16 - 5pi/32  =  ~0.098

Hmn, those numbers look familiar.  Of course, things will only be quite this tidy if our
camera.height and camera.width are both odd, or both even.

Okay, in our left column, with theta = 0.687, we don't intersect the wall.  Fine.

In our second column, with theta = 0.491, we don't QUITE intersect the wall.  It's really close
(unless I screwed up my math, the leftmost edge of the wall is at theta=0.464).  If we had twice the
horizontal resolution (i.e. if we were doing the left half and right half of this pixel separately),
we'd get a hit in the right half.  Oh well, at this resolution, no draw.

In our third column, we hit the wall, at a distance of 2.74 (according to my Ex02 solution; feel
free to correct me).  Its height-above-eye-level is 1.  So consider the following triangle.  Its
base is 2.74 units long, and it runs straight out from our eye to the middle of the wall.  The far
end of the triangle is 1 unit tall (running from the middle of the wall to the top of the wall).  So
the angle from horizontal to the top of the wall, in our third column, goes as follows:

  tan(phi) = opposite/adjacent = 1/2.74
  phi = arctan(1/2.74) = 0.35

Notice that 0.35 is greater than 0.098, and greater than 0.294, but less than 0.491, so our wall is
drawn a total of 4 pixels tall (2 above the midline, 2 below).

Our fourth column, apparently the distance is 3.88, so

  phi = arctan(1/3.88) = 0.25 

Notice that 0.25 is greater than 0.098, but less than 0.294 and 0.491, so our wall is drawn a total
of 2 pixels tall (1 above the midline, 1 below).

Mind you, if you were paying enough attention to how perspective works, and you are willing to
struggle with trigonometry a bit, then you shouldn't need to calculate all those phi values.  You
calculate one phi value, do a little arithmetic, and you're done.

Anyway, that's it.  All in all, our wall should colour 6 pixels red, with the rest being sky or ground.
